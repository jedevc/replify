#!/usr/bin/env python3

import argparse
import os
import re
import readline
import shlex
import subprocess
import sys

PROMPT = "$ "

SHELL_ESCAPE = ":"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("template", nargs="+")
    parser.add_argument("--format", action=ToggleAction, default=False,
            help="use advanced formatting (default: false)")
    parser.add_argument("--escape", action=ToggleAction, default=True,
            help="allow shell escapes (default: true)")
    args = parser.parse_args()

    repl = REPL(args.template, args.format, args.escape)
    repl.loop()

class REPL:
    def __init__(self, template=None, format=False, escape=True):
        self.template = template or []
        self.format = format
        self.escape = escape

        readline.parse_and_bind("tab: complete")

    def do(self):
        line = self.read()
        if not line:
            return

        self.evaluate(line)

    def read(self):
        line = input(PROMPT).strip()
        if len(line) == 0:
            return None

        if self.escape and line.startswith(SHELL_ESCAPE):
            rest = line[len(SHELL_ESCAPE):]
            return shlex.split(rest)

        parts = shlex.split(line)
        if self.format:
            return apply_format(self.template, parts)
        else:
            return self.template + parts

    def evaluate(self, args):
        try:
            subprocess.run(args, env=os.environ.copy())
        except FileNotFoundError:
            message = "replify: command not found: {}".format(args[0])
            print(message, file=sys.stderr)
        
    def loop(self):
        try:
            while True:
                try:
                    self.do()
                except KeyboardInterrupt:
                    print()
        except EOFError:
            return

SLICE_REGEX = re.compile(r"{(-?\d*):(-?\d*)}")
INDEX_REGEX = re.compile(r"{(-?\d+)}")

def apply_format(templates, items):
    final = []

    for template in templates:
        match = SLICE_REGEX.search(template)
        if match:  # try to find a slice
            if match.start() == 0 and match.end() == len(template):
                start = int(match[1]) if match[1] else 0
                end = int(match[2]) if match[2] else len(items)

                final.extend(items[start:end])
            else:
                message = "replify: slice cannot be part of a larger argument"
                print(message, file=sys.stderr)
                return None
        else:
            # replace all indexes
            result = INDEX_REGEX.sub(lambda m: items[int(m[1])] if int(m[1]) < len(items) else '', template)
            final.append(result)

    return final

class ToggleAction(argparse.Action):
    def __init__(self, option_strings, dest, default=None, required=False, help=None):
        if default is None:
            raise ValueError("default must be provided for the toggle")

        if len(option_strings) != 1:
            raise ValueError("incorrect number of options provided")
        opt = option_strings[0]

        if not opt.startswith("--"):
            raise ValueError("option must be in long form")

        opt = opt[2:]
        opts = ['--' + opt, '--no-' + opt]
        super().__init__(opts, dest, nargs=0, const=None, default=default,
                         required=required, help=help)

    def __call__(self, parser, namespace, values, option_strings):
        if option_strings.startswith('--no-'):
            setattr(namespace, self.dest, False)
        else:
            setattr(namespace, self.dest, True)

if __name__ == "__main__":
    main()
